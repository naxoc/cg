<?php
/**
 * Implementation of hook_drush_command().
 */
function cg_drush_command() {
  $items['cg-panels'] = array(
    // We're skipping the customary drush_ prefix, as it increases the chance
    // of colliding with a hook.
    'callback' => 'cg_create_panels_plugin',
    'description' => 'Create panels plugins.',
    'arguments' => array(
      'type' => 'The type of panel plugin. Mandatory.',
      'name' => 'The name of the panel plugin. Mandatory.',
    ),
    'examples' => array(
      'cg create layout my_layout' => 'Creates a layout called my_layout in the module folder.',
    ),
  );
  return $items;
}

function cg_create_panels_plugin() {
  $module = cg_get_module();
  if (!$module) {
    return FALSE;
  }
  $arguments = func_get_args();
  if (empty($arguments[0])) {
    return drush_set_error(dt('No plugin type specified.'));
  }
  if (empty($arguments[1])) {
    return drush_set_error(dt('No name specified.'));
  }

  
  $plugin_name = $arguments[1];
  $plugin_type = $arguments[0];
  
  // Get the naming logic.
  $prefix = $module .'_'. $plugin_name .'_';
  
  $file_code[] = '<?php';
  $file_code[] = '// $Id$';
  $file_code[] = '';
  $file_code[] = '/**';
  $file_code[] = ' * @file';
  $file_code[] = ' * '. ucfirst($plugin_type) .' plugin generated by drush cg.';
  $file_code[] = ' */';
  $file_code[] = '';
  
  // Is the plugin type one that we know?
  switch ($arguments[0]) {
    case 'content_type':
      $file_code += cg_create_content_type($plugin_name, $prefix);
    break;
    case 'style':
      $file_code += cg_create_style($plugin_name, $prefix);
    break;
    case 'task':
      $file_code += cg_create_task($plugin_name, $prefix);
    break;
    default:
      return drush_set_error(dt('I do not know the plugin type you specified.')); // TODO. Hvad kan man sÃ¥?
  }
  // Change to the current module dir.
  chdir(drush_cwd());
  if (!file_exists('plugins')) {
    drush_op('mkdir', 'plugins');
  }
  if (!file_exists('plugins/'. $plugin_type)) {
    drush_op('mkdir', 'plugins/'. $plugin_type);
  }
  $filename = sprintf('plugins/%s/%s.inc', $plugin_type, $plugin_name);
  
  cg_write($filename, implode("\n", $file_code));
}

function cg_create_style($plugin_name, $prefix) {

  $file_code[] = "/**";
  $file_code[] = " * Implementation of hook_panels_styles().";
  $file_code[] = " */";
  $file_code[] = "function ". $prefix ."panels_styles() {";
  $file_code[] = "  return array(";
  $file_code[] = "    '". $plugin_name."' => array(";
  $file_code[] = "      'title' => t('TITLE'),";
  $file_code[] = "      'description' => t('DESCRIPTION'),";
  $file_code[] = "      'render panel' => '". $prefix ."style_render_panel',";
  $file_code[] = "      'render pane' => '". $prefix ."style_render_pane',";
  $file_code[] = "    ),";
  $file_code[] = "  );";
  $file_code[] = "}";
  $file_code[] = '';
  
  $file_code[] = "/**";
  $file_code[] = " * Render callback for a single pane.";
  $file_code[] = " */";
  $file_code[] = "function theme_". $prefix ."style_render_pane(\$content, \$pane, \$display) {";
  $file_code[] = "  if (!\$content->content) {";
  $file_code[] = "    return;";
  $file_code[] = "  }";
  $file_code[] = "  return 'SOMETHING';";
  $file_code[] = "}";
  $file_code[] = '';
  
  $file_code[] = "/**";
  $file_code[] = " * Render callback for a panel.";
  $file_code[] = " */";
  $file_code[] = "function theme_". $prefix ."style_render_panel(\$display, \$panel_id, \$panes, \$settings) {";
  $file_code[] = "  if (!\$content->content) {";
  $file_code[] = "    return;";
  $file_code[] = "  }";
  $file_code[] = "  return 'SOMETHING';";
  $file_code[] = "}";
  $file_code[] = '';

  return $file_code;
}

function cg_create_content_type($plugin_name, $prefix) {

  $file_code[] = 'function '. $prefix .'content_type_render($subtype, $conf, $panel_args, $context) {';
  $file_code[] = '  $block = new stdClass();';
  $file_code[] = '  $block->content = \'\';';
  $file_code[] = '  return $block;';
  $file_code[] = '}';
  $file_code[] = '';

  $file_code[] = 'function '. $prefix .'content_type_edit_form(&$form, &$form_state) {';
  $file_code[] = '  $form[\''. $prefix .'YOUR_VAR\'] = array(';
  $file_code[] = "     '#type' => 'textfield',";
  $file_code[] = "     '#title' => t('YOUR_VAR TITLE'),";
  $file_code[] = "     '#description' => t('Enter the vocabulary id of the Countries and regions vocabulary.'),";
  $file_code[] = "     '#default_value' => !empty(\$form_state['conf']['". $prefix  ."YOUR_VAR']) ? \$form_state['conf']['". $prefix  ."YOUR_VAR'] : ''";
  $file_code[] = "   );";
  $file_code[] = "}";
  $file_code[] = '';
  
  $file_code[] = "/**";
  $file_code[] = "  * The submit form stores the data in \$conf.";
  $file_code[] = "  */";
  $file_code[] = "function ". $prefix . "content_type_edit_form_submit(&\$form, &\$form_state) {";
  $file_code[] = "  foreach (array_keys(\$form_state['plugin']['defaults']) as \$key) {";
  $file_code[] = "    if (isset(\$form_state['values'][\$key])) {";
  $file_code[] = "      \$form_state['conf'][\$key] = \$form_state['values'][\$key];";
  $file_code[] = "    }";
  $file_code[] = "  }";
  $file_code[] = "}";
  $file_code[] = '';

  return $file_code;
}

function cg_get_module() {
  // Find a module.
  // Apparently drush thinks we're in the modules directory, while we're in
  // fact in the site root. Odd.
  $old = getcwd();
  chdir(drush_cwd());
  $modules = glob('*.module');
  chdir($old);
  $candidates = array();
  foreach ($modules as $name) {
    $candidates[] = basename($name, '.module');
  }

  if (sizeof($candidates) == 1) {
    return $candidates[0];
  } else {
    // TODO: if more than one, list and provide argument.
    return drush_set_error(dt('No module.'));
  }
}

function cg_write($filename, $content) {
  file_put_contents($filename . '.new', $content);
  if (file_exists($filename)) {
    drush_op('rename', $filename, $filename . '.em~');
  }
  drush_op('rename', $filename . '.new', $filename);
}
